$speed: 0.3s;
$easing: ease;
$gutter: 20px;

// Forms
@mixin fields {
  margin-bottom: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

@mixin field {
  flex: 1 1 auto;
}

@mixin validate {
  font-size: 14px;
  color: var(--clr-primary);
}

@mixin input {
  height: 40px;
  border: none;
  background: var(--clr-dark-400);
  padding-left: 20px;
  display: block;
  width: 100%;
  color: #fff;
}

@mixin separator {
  font-size: 14px;
  border-bottom: 1px solid var(--clr-light-600);
  padding-bottom: 5px;
}

@function if($condition, $if-value, $else-value) {
  @if ($condition == true) {
    @return $if-value;
  } @else {
    @return $else-value;
  }
}

@mixin f-center($v, $h) {
  @if ($v == true) {
    align-items: center;
  }

  @if ($h == true) {
    justify-content: center;
  }
}

@mixin transition($prop: null) {
  transition: all 0.3s ease;
}

@mixin paragraph($font-size: 16px, $line-height: 24px) {
  font-size: $font-size;
  line-height: $font-size * 1.5;
}

@mixin container($max-width: var(--mx-width)) {
  max-width: $max-width;
  flex: 1;
  margin: auto;

  @include media('<=#{1200px + ($gutter * 2)}') {
    padding-left: $gutter;
    padding-right: $gutter;
  }
}

@mixin clearfix {
  &::after {
    clear: both;
    content: ' ';
    display: table;
  }
}

@mixin center($width, $height: 0) {
  position: absolute;

  @if $height != 0 {
    left: calc(50% - (#{$width} / 2));
    top: calc(50% - (#{$height} / 2));
  } @else {
    left: calc(50% - (#{$width} / 2));
    top: calc(50% - (#{$width} / 2));
  }
}

@mixin fa($size, $dimensions) {
  display: inline-block;
  font-size: $size;
  height: $dimensions;
  line-height: $dimensions;
  text-align: center;
  vertical-align: top;
  width: $dimensions;
}

@mixin hamburger($width: 25px, $height: 18px) {
  cursor: pointer;
  display: block;
  height: $height;
  position: relative;
  width: $width;

  span {
    background-color: currentColor;
    display: block;
    height: 2px;
    left: 0;
    position: absolute;
    transform-origin: center;
    transition-duration: $speed;
    transition-property: background-color, opacity, transform;
    transition-timing-function: $easing;
    width: 100%;
    border-radius: 10px;

    &:nth-child(1) {
      top: 0;
    }

    &:nth-child(2) {
      top: 50%;
      transform: translateY(-50%);
    }

    &:nth-child(3) {
      bottom: 0;
    }
  }

  &:hover {
    background-color: rgba(black, 0.05);
  }

  // Modifers
  &.active {
    span {
      &:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
      }

      &:nth-child(2) {
        opacity: 0;
      }

      &:nth-child(3) {
        transform: translateY(-9px) rotate(-45deg);
      }
    }
  }
}

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

@mixin placeholder {
  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input';

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin ltr-property($property, $spacing, $right: true) {
  $normal: if($right, 'right', 'left');
  $opposite: if($right, 'left', 'right');

  @if $rtl {
    #{$property}-#{$opposite}: $spacing;
  } @else {
    #{$property}-#{$normal}: $spacing;
  }
}

@mixin ltr-position($spacing, $right: true) {
  $normal: if($right, 'right', 'left');
  $opposite: if($right, 'left', 'right');

  @if $rtl {
    #{$opposite}: $spacing;
  } @else {
    #{$normal}: $spacing;
  }
}

// Placeholders

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin arrow($color: transparent) {
  border: 3px solid $color;
  border-radius: 2px;
  border-right: 0;
  border-top: 0;
  content: ' ';
  display: block;
  height: 0.625em;
  margin-top: -0.4375em;
  pointer-events: none;
  position: absolute;
  top: 50%;
  transform: rotate(-45deg);
  transform-origin: center;
  width: 0.625em;
}

@mixin block($spacing: $block-spacing) {
  &:not(:last-child) {
    margin-bottom: $spacing;
  }
}

@mixin loader {
  animation: spinAround 500ms infinite linear;
  border: 2px solid $grey-lighter;
  border-radius: $radius-rounded;
  border-right-color: transparent;
  border-top-color: transparent;
  content: '';
  display: block;
  height: 1em;
  position: relative;
  width: 1em;
}

@mixin overlay($offset: 0) {
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}

@mixin simple-menu {
  display: flex;
  align-items: center;
  list-style: none;
  margin: 0;
  padding: 0;

  a {
    display: block;
    margin: 0 10px;
  }
}

@mixin vertical-center {
  display: inline-flex;
  align-items: center;
}

@function opposite-position($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top': 'bottom',
    'right': 'left',
    'bottom': 'top',
    'left': 'right',
    'center': 'center',
    'ltr': 'rtl',
    'rtl': 'ltr'
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append(
        $opposite-directions,
        unquote(map-get($direction-map, $direction))
      );
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }
}

@mixin visually-hidden() {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  border: 0;
}

@mixin custom-scrollbar() {
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
    padding-top: 20px;
  }

  &::-webkit-scrollbar-button {
    width: 0px;
    height: 0px;
  }

  &::-webkit-scrollbar-thumb {
    background: #000;
    border: 0px none #ffffff;
    border-radius: 52px;
  }

  &::-webkit-scrollbar-track {
    background: #ccccd9;
    border: 0px none #ffffff;
    border-radius: 50px;
  }

  &::-webkit-scrollbar-corner {
    background: transparent;
  }
}